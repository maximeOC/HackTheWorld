package com.pentest.hackwhitehat.service;


import org.mandas.docker.client.DockerClient;
import org.mandas.docker.client.LogStream;
import org.mandas.docker.client.builder.jersey.JerseyDockerClientBuilder;
import org.mandas.docker.client.exceptions.DockerCertificateException;
import org.mandas.docker.client.exceptions.DockerException;
import org.mandas.docker.client.messages.ContainerConfig;
import org.mandas.docker.client.messages.ContainerCreation;
import org.mandas.docker.client.messages.TopResults;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.json.JSONObject;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


@Service
public class PentestService {

    @Value("${api-key}")
    private String apikey;

    private final DockerClient docker;

    public PentestService(DockerClient dockerClient) {
        this.docker = dockerClient;
    }

    public String ScanIP(String ipAdress) throws DockerException, InterruptedException, UnknownHostException {

        String regex = "(http://|https://)?|(\\\\.com)$";

        Pattern p = Pattern.compile(regex);
        Matcher m = p.matcher(ipAdress);

        String result = m.replaceAll("");

        InetAddress inetadress = InetAddress.getByName(result);
        String host = inetadress.getHostAddress();

        final ContainerConfig containerConfig = ContainerConfig.builder()
                .image("securecodebox/nmap")
                .cmd("nmap", "-A", host)
                .build();

        final ContainerCreation creation = docker.createContainer(containerConfig);
        final String id = creation.id();

        docker.startContainer(id);
        final TopResults topResults = docker.topContainer(id, "aux");
        // Got the logs
        System.out.println("wait container");
        docker.waitContainer(id);
        System.out.println("container ending");
        final LogStream logs = docker.logs(
                id,
                DockerClient.LogsParam.stdout(),
                DockerClient.LogsParam.stderr()
        );
        final String log = logs.readFully();
        System.out.println("Show logs");
        System.out.println(log);

        // Remove container
        docker.removeContainer(id);

        return log;
    }

    public String scanWpscan(String url) throws DockerException, InterruptedException, UnknownHostException {

        String rawUrl = url;
        String httpsRegex = "^(http://|https://)";
        String wwwRegex = "^(http://|https://)?www\\.";

        Pattern httpsPattern = Pattern.compile(httpsRegex);
        Matcher httpsMatcher = httpsPattern.matcher(url);

        // Si "httpsRegex" est présente dans la variable "url".
        // Si ce n'est pas le cas, cela signifie que l'URL ne commence pas par "http://" ou "https://".
        if (!httpsMatcher.find()) {
            rawUrl = "https://" + rawUrl;
        }
        Pattern wwwPattern = Pattern.compile(wwwRegex);
        Matcher wwwMatcher = wwwPattern.matcher(rawUrl);
        // Cette condition vérifie si l'expression régulière "wwwRegex" est présente dans la variable "rawUrl".
        // Si ce n'est pas le cas, cela signifie que l'URL ne commence pas par "www." (ou "http://www." ou "https://www.").
        if (!wwwMatcher.find()) {
            // Cela assure que l'URL commence par "https://www.".
            int prefixLength = "https://".length();
            rawUrl = rawUrl.substring(0, prefixLength) + "www." + url.substring(prefixLength);
        }

        final ContainerConfig containerConfig = ContainerConfig.builder()
                .image("wpscanteam/wpscan")
                .cmd("wpscan", "--url", rawUrl , "--enumerate", "vp", "--api-token", apikey ,
                        "--plugins-detection", "aggressive", "--ignore-main-redirect")
                .build();

        final ContainerCreation creation = docker.createContainer(containerConfig);
        final String id = creation.id();

        docker.startContainer(id);

        docker.waitContainer(id);

        final LogStream logs = docker.logs(
                id,
                DockerClient.LogsParam.stdout(),
                DockerClient.LogsParam.stderr()
        );
        final String log = logs.readFully();

        // Remove container
        docker.removeContainer(id);

        // Close the docker client
        docker.close();
        return log;
    }
}