/*
package com.pentest.hackwhitehat.controller;

import com.pentest.hackwhitehat.entity.NmapScan;
import com.pentest.hackwhitehat.entity.Rapport;
import com.pentest.hackwhitehat.repository.RapportRepository;
import com.pentest.hackwhitehat.service.ParseService;
import com.pentest.hackwhitehat.service.PentestService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.web.servlet.ModelAndView;

import static org.mockito.Mockito.*;

import org.mandas.docker.client.exceptions.DockerCertificateException;
import org.mandas.docker.client.exceptions.DockerException;

import java.net.UnknownHostException;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class RapportControllerTest {

    @Mock
    private PentestService pentestService;

    @Mock
    private ParseService parseService;

    @Mock
    private RapportRepository rapportRepository;

    @InjectMocks
    private RapportController rapportController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void home_shouldSaveRapportAndReturnModelAndView() throws DockerException, DockerCertificateException, InterruptedException, UnknownHostException {

        String ipAddress = "192.168.0.1";


        String logs = "Sample logs";
        when(pentestService.ScanIP(ipAddress)).thenReturn(logs);


        NmapScan nmapScan = new NmapScan(ipAddress, "up", List.of("80", "443"));
        when(parseService.parseNmapOutput(logs)).thenReturn(nmapScan);

        // Mock rapportRepository.save()
        Rapport savedRapport = new Rapport();
        when(rapportRepository.save(any(Rapport.class))).thenReturn(savedRapport);

        // Perform the request
        ModelAndView modelAndView = rapportController.home(ipAddress);

        // Assertions
        assertNotNull(modelAndView);
        assertEquals("rapport", modelAndView.getViewName());
        assertEquals(nmapScan, modelAndView.getModel().get("nmapScan"));
        verify(pentestService).ScanIP(ipAddress);
        verify(parseService).parseNmapOutput(logs);
        verify(rapportRepository).save(any(Rapport.class));
    }
}
*/

/*package com.pentest.hackwhitehat.controller;

import com.pentest.hackwhitehat.entity.NmapScan;
import com.pentest.hackwhitehat.entity.Rapport;
import com.pentest.hackwhitehat.entity.WpScan;
import com.pentest.hackwhitehat.repository.RapportRepository;
import com.pentest.hackwhitehat.service.ParseService;
import com.pentest.hackwhitehat.service.PentestService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.web.servlet.ModelAndView;

import org.mandas.docker.client.exceptions.DockerCertificateException;
import org.mandas.docker.client.exceptions.DockerException;

import java.net.UnknownHostException;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class RapportControllerTest {

    @Mock
    private PentestService pentestService;

    @Mock
    private ParseService parseService;

    @Mock
    private RapportRepository rapportRepository;

    @InjectMocks
    private RapportController rapportController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void home_shouldSaveRapportAndReturnModelAndView() throws DockerException, DockerCertificateException, InterruptedException, UnknownHostException {
        // Mock input data
        String ipAddress = "192.168.0.1";

        // Mock pentestService.ScanIP()
        String logsNmap = "Sample Nmap logs";
        when(pentestService.ScanIP(ipAddress)).thenReturn(logsNmap);

        // Mock pentestService.scanWpscan()
        String logsWpscan = "Sample Wpscan logs";
        when(pentestService.scanWpscan(ipAddress)).thenReturn(logsWpscan);

        // Mock parseService.parseNmapOutput()
        NmapScan nmapScan = new NmapScan(ipAddress, "up", List.of("80", "443"));
        when(parseService.parseNmapOutput(logsNmap)).thenReturn(nmapScan);

        // Mock parseService.parseWpscanLogs()
        List<WpScan> wpScanList = List.of(new WpScan("Title", List.of("Reference Line 1", "Reference Line 2")));
        when(parseService.parseWpscanLogs()).thenReturn(wpScanList);

        // Mock rapportRepository.save()
        Rapport savedRapport = new Rapport();
        when(rapportRepository.save(any(Rapport.class))).thenReturn(savedRapport);

        // Perform the request
        ModelAndView modelAndView = rapportController.home(ipAddress);

        // Assertions
        assertNotNull(modelAndView);
        assertEquals("rapport", modelAndView.getViewName());
        assertEquals(nmapScan, modelAndView.getModel().get("nmapScan"));
        assertEquals(wpScanList, modelAndView.getModel().get("wpScan"));
        verify(pentestService).ScanIP(ipAddress);
        verify(pentestService).scanWpscan(ipAddress);
        verify(parseService).parseNmapOutput(logsNmap);
        verify(parseService).parseWpscanLogs();
        verify(rapportRepository).save(any(Rapport.class));
    }
}*/
