package com.pentest.hackwhitehat.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mandas.docker.client.DockerClient;
import org.mandas.docker.client.LogStream;
import org.mandas.docker.client.exceptions.DockerException;
import org.mandas.docker.client.messages.ContainerConfig;
import org.mandas.docker.client.messages.ContainerCreation;
import org.mandas.docker.client.messages.TopResults;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

import java.net.UnknownHostException;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

//@RunWith(MockitoJUnitRunner.class)
public class PentestServiceTest {

    private PentestService pentestService;

    @Mock
    private DockerClient dockerClient;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        pentestService = new PentestService(dockerClient);
    }

    @Test
    public void testScanIP() throws UnknownHostException, DockerException, InterruptedException, DockerException, UnknownHostException {

            // Données de test
            String ipAddress = "192.168.146.1";
            String expectedResult = "Expected logs output";

            // Mock des appels DockerClient requis
            ContainerCreation containerCreation = mock(ContainerCreation.class);
            TopResults topResults = mock(TopResults.class);
            LogStream logStream = mock(LogStream.class);

            when(dockerClient.createContainer(Mockito.any(ContainerConfig.class))).thenReturn(containerCreation);
            when(containerCreation.id()).thenReturn("container_id");
            when(dockerClient.topContainer("container_id", "aux")).thenReturn(topResults);
            when(dockerClient.logs("container_id", DockerClient.LogsParam.stdout(), DockerClient.LogsParam.stderr())).thenReturn(logStream);
            when(logStream.readFully()).thenReturn(expectedResult);

            // Appel de la méthode à tester
            String result = pentestService.ScanIP(ipAddress);

            // Vérification des appels et du résultat
            verify(dockerClient).createContainer(Mockito.any(ContainerConfig.class));
            verify(dockerClient).startContainer("container_id");
            verify(dockerClient).waitContainer("container_id");
            verify(dockerClient).logs("container_id", DockerClient.LogsParam.stdout(), DockerClient.LogsParam.stderr());
            verify(dockerClient).removeContainer("container_id");

            assertEquals(expectedResult, result);
    }

}

